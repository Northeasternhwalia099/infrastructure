AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE Assignment 06

Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  SubnetACIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  AMIId:
    Description: Id of AMI
    Type: String
    Default: ami-0a1153c365d741268

  RootVolumeSize:
    Description: size of volume
    Type: Number
    Default: "50"

  RootVolumeType:
    Description: Volume_type
    Type: String
    Default: gp2

  InstanceType:
    Description: instance_type
    Type: String
    Default: t2.micro

  DeleteOnTermin:
    Description: Delete_on_Termination
    Type: String
    Default: true

  AvailabilityZoneA:
    Description: Zone-A
    Type: Number
    Default: 0

  HostedZoneID:
    Type: String
    Description: The DNS ID of an existing Amazon Route 53 hosted zone
    Default: Z045957620DYGOXXQWLXB

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24

  PrivateAZ1:
    Description: Private-AZ-1
    Type: Number
    Default: "0"

  PrivateAZ2:
    Description: Private-AZ-2
    Type: Number
    Default: "1"

  PrivateAZ3:
    Description: Private-AZ-3
    Type: Number
    Default: "2"

  DatabaseEngine:
    Description: database engine
    Type: String
    Default: MySQL

  DBInstanceClass:
    Description: Type of db space to be allocated
    Type: String
    Default: db.t3.micro

  MultiAZDeployment:
    Description: Deploy to multiple availability zones
    Type: String
    Default: false
    AllowedValues: [true, false]

  DBInstanceIdentifier:
    Description: Identifier for the instance
    Type: String
    Default: csye6225

  MasterUsername:
    Description: Master username
    Type: String
    Default: csye6225

  MasterPassword:
    Description: Master password
    Type: String
    Default: csye6225

  PublicAccessibility:
    Description: Public Accessibility
    Type: String
    Default: "false"
    AllowedValues: [true, false]

  DatabaseName:
    Description: database name
    Type: String
    Default: csye6225

  HostedZoneName:
    Description: hostname
    Type: String
    Default: walia-cloud.me.

  # SNSTopicArn:
  #   Default: "arn:aws:sns:us-east-1:AccountId:create_token"
  #   Type: String

  DynamoTableName:
    Default: "csye6225"
    Type: String

  SenderEmail:
    Default: "do-not-reply@walia-cloud.me"
    Type: String

  SQSQueueName:
    Default: "send-token-queue"
    Type: String

  TokenSentDynamoTableName:
    Default: "token_sent_email"
    Type: String

  Subnet1CIDR:
    Default: 10.192.11.0/24
    Type: String

  Subnet2CIDR:
    Default: 10.192.12.0/24
    Type: String

  Subnet3CIDR:
    Default: 10.192.13.0/24
    Type: String

  SSLCertificateArn:
    Default: arn:aws:acm:us-east-1:278111652716:certificate/4d07065c-0935-4bb2-a361-5f907349e7fe
    Type: String

Resources:
  # vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-VPC"]]

  # connects to public network
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetACIDR
      AvailabilityZone: !Select [!Ref AvailabilityZoneA, !GetAZs ] # Get the first AZ in the list
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  # WebAppInstance:
  #   Type: "AWS::EC2::Instance"
  #   Properties:
  #     ImageId: !Ref AMIId
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         cd /home/ubuntu/
  #         touch application.properties
  #         echo server.port = 8080 >> application.properties
  #         echo spring.jpa.hibernate.ddl-auto=update >> application.properties
  #         echo spring.datasource.url=jdbc:mysql:\/\/${DBinstance.Endpoint.Address}:3306\/csye6225?sslMode=REQUIRED >> application.properties
  #         echo spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver >> application.properties
  #         echo spring.datasource.username=csye6225 >> application.properties
  #         echo spring.datasource.password=csye6225 >> application.properties
  #         echo spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect >> application.properties
  #         echo bucketName=${EncryptedS3Bucket} >> application.properties
  #         echo snstopicArn=${MySNSTopic} >> application.properties
  #         echo region=us-east-1 >> application.properties
  #         echo spring.profiles.active=ec2 >> application.properties
  #         chmod 764 application.properties
  #         sudo systemctl daemon-reload
  #         sudo systemctl enable appservice.service
  #         sudo systemctl start appservice.service
  #         sudo systemctl status appservice.service
  #         sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  #           -a fetch-config \
  #           -m ec2 \
  #           -c file:/opt/aws/amazon-cloudwatch-agent/cloudwatch_config.json \
  #           -s
  #         sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
  #         java -jar CSYE-app-0.0.1-SNAPSHOT.jar

  #     InstanceType: !Ref InstanceType
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: "0"
  #         GroupSet: [!Ref InstanceSecurityGroup]
  #         SubnetId: !Ref SubnetA
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs:
  #           VolumeSize: !Ref RootVolumeSize
  #           DeleteOnTermination: !Ref DeleteOnTermin
  #     IamInstanceProfile: !Ref S3EC2InstanceProfile

  S3EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: s3-ec2-instance-profile
      Path: /
      Roles:
        - !Ref S3EC2InstanceRole

  ResourceRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref "HostedZoneID"
      Comment: DNS name for my instance.
      RecordSets:
        - Name: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "loadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "loadBalancer.DNSName"

  S3EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: s3-ec2-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"

  EC2InstanceS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DemoS3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:Delete*
              - s3:Get*
              - s3:Put*
              - s3:List*
            Resource:
              - !Sub arn:aws:s3:::${EncryptedS3Bucket}
              - !Sub arn:aws:s3:::${EncryptedS3Bucket}/*

      Roles:
        - !Ref S3EC2InstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "applicationsecuritygroup"
      GroupDescription: "Allow traffic from load balancer on port 8080"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: EC2 Security Group

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable

  EncryptedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref "AWS::StackName", "-s3"]]
      LifecycleConfiguration:
        Rules:
          - Id: TransitionRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
    DeletionPolicy: Delete

  # Database
  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "subnetgroup"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref "PrivateSubnet1"
        - !Ref "PrivateSubnet2"
        - !Ref "PrivateSubnet3"

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "database"
      VpcId: !Ref VPC
      GroupDescription: "Allow mysql inbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} DB Security Group

  DBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: SQL custom param group
      Family: mysql8.0
      Parameters:
        performance_schema: 1

  DBinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DatabaseEngine
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBSubnetGroupName: !Ref DbSubnetGroup
      MultiAZ: !Ref MultiAZDeployment
      KmsKeyId: !Ref RdsKeyId
      StorageEncrypted: true
      PubliclyAccessible: !Ref PublicAccessibility
      DBName: !Ref DatabaseName
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBParameterGroupName: !Ref DBParamGroup
      AllocatedStorage: "5"
      VPCSecurityGroups:
        - !Ref DBEC2SecurityGroup
    DeletionPolicy: Delete

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: !Sub ${DynamoTableName}
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: "TRUE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-dynamodb

  TokenSentDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: token_sent_email
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: "TRUE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tokensentcsye6225-dynamodb

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RegistrationMail
      Runtime: java11
      Code:
        S3Bucket: jarfilelambda
        S3Key: Serverless-0.0.1-SNAPSHOT.jar
      Handler: com.csye6225.project.Serverless.EmailEvent::handleRequest
      Timeout: 600
      MemorySize: 1024
      EphemeralStorage:
        Size: 1024
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          SenderEmail: !Ref SenderEmail
          region: us-east-1

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "LambdaFunction"
              - "Arn"
          Protocol: "lambda"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      RoleName: LambdaRole

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref "MySNSTopic"

  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - "LambdaFunction"
          - "Arn"
      Protocol: "lambda"
      TopicArn: !Ref "MySNSTopic"

  SQSQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 864000
      VisibilityTimeout: 30
      QueueName: !Ref SQSQueueName
      Tags:
        - Key: Name
          Value: !Ref SQSQueueName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [!Ref PrivateAZ3, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)

  # Private Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ)

  # Private route table associations
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref SubnetA

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  RdsKeyId:
    Type: AWS::KMS::Key
    Properties:
      Description: "RDS KMS key"
      KeyPolicy:
        Id: "kms-key-for-rds"
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
            Action: kms:*
            Resource: "*"
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: "*"
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrants
            Resource: "*"

  RdsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rds
      TargetKeyId: !Ref RdsKeyId

  EBSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-ebs
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Enable Autoscalling
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
              - kms:CreateGrant
            Resource: "*"

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer Security group with ports 80 and 443
      GroupName: loadBalancerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref VPC

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: "/healthz"
      HealthCheckPort: "8080"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Matcher:
        HttpCode: "200-299"
      Name: !Sub "${AWS::StackName}-app-lb-tg"
      Port: 8080
      Protocol: "HTTP"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-app-lb-tg"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      TargetType: "instance"
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS

  ApplicationScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      Cooldown: "60"
      ScalingAdjustment: "1"

  ApplicationScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      Cooldown: "60"
      ScalingAdjustment: "-1"

  autoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: "60"
      HealthCheckGracePeriod: 1200
      HealthCheckType: EC2
      DesiredCapacity: "1"
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplate
        Version: !GetAtt launchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup

      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub "${AWS::StackName}-csye6225-ec2"
          PropagateAtLaunch: "true"
        - Key: ec2-deploy
          Value: deploy-ec2
          PropagateAtLaunch: "true"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      NewInstancesProtectedFromScaleIn: false

  CPUHighAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Scale-up if CPU more than 5%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "5"
      AlarmActions:
        - !Ref ApplicationScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Scale-down if CPU less than 3%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "1"
      Threshold: "3"
      AlarmActions:
        - !Ref ApplicationScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup
      ComparisonOperator: LessThanThreshold

  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-EC2-instance"

      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: 50
              VolumeType: gp2
              Encrypted: true
              KmsKeyId: !Ref EBSKey
              DeleteOnTermination: true

        KeyName: csye6225
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt
            - S3EC2InstanceProfile
            - Arn
        ImageId: !Ref AMIId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            cd /home/ubuntu/
            touch application.properties
            echo server.port = 8080 >> application.properties
            echo spring.jpa.hibernate.ddl-auto=update >> application.properties
            echo spring.datasource.url=jdbc:mysql:\/\/${DBinstance.Endpoint.Address}:3306\/csye6225 >> application.properties
            echo spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver >> application.properties
            echo spring.datasource.username=csye6225 >> application.properties
            echo spring.datasource.password=csye6225 >> application.properties
            echo spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect >> application.properties
            echo bucketName=${EncryptedS3Bucket} >> application.properties
            echo snstopicArn=${MySNSTopic} >> application.properties
            echo s3.bucket.region=us-east-1 >> application.properties
            echo spring.profiles.active=ec2 >> application.properties
            chmod 764 application.properties
            sudo systemctl daemon-reload
            sudo systemctl enable appservice.service
            sudo systemctl start appservice.service
            sudo systemctl status appservice.service
            sudo yum install amazon-cloudwatch-agent -y
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/etc/aws/cloudwatch_config.json \
              -s
            sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
            java -jar webapp-0.0.1-SNAPSHOT.jar
